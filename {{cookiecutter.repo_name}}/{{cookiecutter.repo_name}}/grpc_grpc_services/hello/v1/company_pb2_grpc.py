# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from v1 import company_pb2 as v1_dot_company__pb2


class CompaniesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateCompany = channel.unary_unary(
                '/Companies/CreateCompany',
                request_serializer=v1_dot_company__pb2.CompanyRequest.SerializeToString,
                response_deserializer=v1_dot_company__pb2.CompanyResponse.FromString,
                )
        self.GetCompany = channel.unary_unary(
                '/Companies/GetCompany',
                request_serializer=v1_dot_company__pb2.CompanyRequest.SerializeToString,
                response_deserializer=v1_dot_company__pb2.CompanyResponse.FromString,
                )
        self.UpdateCompany = channel.unary_unary(
                '/Companies/UpdateCompany',
                request_serializer=v1_dot_company__pb2.CompanyRequest.SerializeToString,
                response_deserializer=v1_dot_company__pb2.CompanyResponse.FromString,
                )
        self.DeleteCompany = channel.unary_unary(
                '/Companies/DeleteCompany',
                request_serializer=v1_dot_company__pb2.CompanyRequest.SerializeToString,
                response_deserializer=v1_dot_company__pb2.CompanyResponse.FromString,
                )


class CompaniesServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateCompany(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCompany(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCompany(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCompany(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CompaniesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateCompany': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCompany,
                    request_deserializer=v1_dot_company__pb2.CompanyRequest.FromString,
                    response_serializer=v1_dot_company__pb2.CompanyResponse.SerializeToString,
            ),
            'GetCompany': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCompany,
                    request_deserializer=v1_dot_company__pb2.CompanyRequest.FromString,
                    response_serializer=v1_dot_company__pb2.CompanyResponse.SerializeToString,
            ),
            'UpdateCompany': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCompany,
                    request_deserializer=v1_dot_company__pb2.CompanyRequest.FromString,
                    response_serializer=v1_dot_company__pb2.CompanyResponse.SerializeToString,
            ),
            'DeleteCompany': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCompany,
                    request_deserializer=v1_dot_company__pb2.CompanyRequest.FromString,
                    response_serializer=v1_dot_company__pb2.CompanyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Companies', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Companies(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateCompany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Companies/CreateCompany',
            v1_dot_company__pb2.CompanyRequest.SerializeToString,
            v1_dot_company__pb2.CompanyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCompany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Companies/GetCompany',
            v1_dot_company__pb2.CompanyRequest.SerializeToString,
            v1_dot_company__pb2.CompanyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateCompany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Companies/UpdateCompany',
            v1_dot_company__pb2.CompanyRequest.SerializeToString,
            v1_dot_company__pb2.CompanyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteCompany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Companies/DeleteCompany',
            v1_dot_company__pb2.CompanyRequest.SerializeToString,
            v1_dot_company__pb2.CompanyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class RelationshipsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Read = channel.unary_unary(
                '/Relationships/Read',
                request_serializer=v1_dot_company__pb2.RelationshipRequest.SerializeToString,
                response_deserializer=v1_dot_company__pb2.RelationshipResponse.FromString,
                )


class RelationshipsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Read(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RelationshipsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Read': grpc.unary_unary_rpc_method_handler(
                    servicer.Read,
                    request_deserializer=v1_dot_company__pb2.RelationshipRequest.FromString,
                    response_serializer=v1_dot_company__pb2.RelationshipResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Relationships', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Relationships(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Relationships/Read',
            v1_dot_company__pb2.RelationshipRequest.SerializeToString,
            v1_dot_company__pb2.RelationshipResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
